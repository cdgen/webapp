/************** LOADER ************/
#loader {
	display: flex;
	position: fixed;
	top: $headerHeight;
	left: $grid*2;
	right: $grid*2;
	bottom: $headerHeight;
	overflow: hidden;
	background: $cLightL;
  z-index:1111;
  transform-origin: right;
  justify-content: center;
  align-items: center;
  
  &.hide {
    transform: scaleX(0);
    transition: transform 0.8s $ease 0s;
  }
  
  &.show {
    transform: scaleX(1);
    transition: transform 0.8s $ease 0s;
    transform-origin: left;
  }
}

@keyframes cutIn {
    from {clip-path: inset(0 0 -0.1em 0);}
    to { clip-path: inset(0 0 1em 0); }
}

@keyframes cutOut {
    from {clip-path: inset(0 0 -1em 0);}
    to { clip-path: inset(0 0 -0.1em 0); }
}

/************** END LOADER ************/

/* STYLES FOR CURRENT AND NEW CONTAINERS */
.load-leave,
.load-enter{

}

/* CURRENT CONTAINER */
/*
.load-leave {
  opacity: 1;
}

.load-leave.load-leave-active {
  opacity: 0.01;
  transition: opacity 2000ms ease-in;
}

/* NEW CONTAINER */
/*
.load-enter {
  opacity: 0.01;
}

.load-enter.load-enter-active {
  opacity: 1;
  transition: opacity 2000ms ease-in;
}
*/

$duratLeave: 2000ms;
$delayLeave: 3000ms;
$delayLeaveAct: $delayLeave - $duratLeave;

$duratActive: 3000ms;
$delayActive: 4000ms;
$delayActiveAct: $delayActive - $duratActive;





.page-title > [class*="title-"] {
  span {
    clip-path: inset(0 0 0 0);
  }
}



/* STYLES FOR CURRENT AND NEW CONTAINERS */

.load-leave,
.load-enter {
  opacity: 0;
  position: absolute;
  display: block;
  top: 0;
  left: 0;
  margin: 0;
}



/* LEAVE */

.load-leave {
  opacity: 1;
  transform: translate3d(0,0,0);
  
  .page-title > [class*="title-"] {
      span {
        clip-path: inset(0 0 0 0);
      }
  }
  
  .page-content {

  }
}

/*  LEAVE ACTIVE  */
.load-leave.load-leave-active {

  opacity: 0.01;
  transform: translate3d(0,0,0);
  transition: transform $duratLeave $delayLeaveAct, opacity $duratLeave $delayLeaveAct;
  
  .page-title > [class*="title-"] {
      span {
        clip-path: inset(0 100% 0 0);
        transition: clip-path 1s cubic-bezier(0.93, 0.48, 0.25, 1);
      }
  }
 
  .page-content {
      opacity: 0.01;
      transform: translate3d(0.5em, 0,0);
      transition: transform $duratLeave $delayLeaveAct, opacity $duratLeave $delayLeaveAct;
  }
}





/* NEW CONTAINER */
/* INITIAL NEW PROPS */

.load-enter {
  opacity: 0.01;
  transform: translate3d(0, 0, 0);
  
  .page-title > [class*="title-"] {
      span {
        clip-path: inset(0 100% 0 0);
      }
  }
  
  .page-content {
      opacity: 0.01;
      transform: translate3d(-2em, 0,0);
      transition: transform 1s 2s, opacity 1s 2s;
  }
}

/* NEW CONTAINER ACTIVE delay: 3000ms; */
.load-enter.load-enter-active {

  opacity: 1;
  transform: translate3d(0,0,0);
  transition: transform $duratActive $delayActiveAct, opacity $duratActive $delayActiveAct;
  
  .page-title > [class*="title-"] {
    span {
      clip-path: inset(0 0 0 0);
      transition: clip-path 1s cubic-bezier(1, 0.5, 0.5, 1);
      transition-delay: 2s;
    }

    &-num {
      span:nth-of-type(1) {transition-delay: 2s;}
      span:nth-of-type(2) {transition-delay: 1.5s;}
    }
    &-cat {
      span{transition-delay: 1.75s;}
    }
    &-text {
      span:nth-of-type(1) {transition-delay: 2.2s;}
      span:nth-of-type(2) {transition-delay: 2.4s;}
    }
  }
}



.slider-item.current {
  @include animation('fadeIn 4s');
  opacity: 1;
}
.slider-item {
  @include animation('fadeOut 2s');
}




// Configuration:
$animation-delay: 2s;
$animation-delay2: 3s;
$duration: 800ms;
$iterations: 1;

.active h2 span, 
.active h2 span:after {
	animation-delay: $animation-delay;
	animation-iteration-count: $iterations;
	animation-duration: $duration;
	animation-fill-mode: both;
	animation-timing-function: cubic-bezier(0.0, 0.5, 0.2, 1);
}
.active h2 span:nth-child(2), 
.active h2 span:nth-child(2):after{
	animation-delay: $animation-delay2;
}


.active h2 span {
	position: relative;
	display: inline-block;
	user-select: none;
	animation-name: overLoad;
	white-space: nowrap;
	cursor: default;
	color: #000;
	
	&:after {
		content: "";
		position: absolute;
		z-index: 999;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: #000;
		transform: scaleX(0);
		transform-origin: 0 50%;
		pointer-events: none;
		animation-name: revealer-text;
	}
	
}


@keyframes overLoad {
	from {
		clip-path: inset(0 100% 0 0);
	}
	to {
		clip-path: inset(0 0 0 0);
	}
}


@keyframes revealer-text {
	
	0%, 50% {
		transform-origin: 0 50%;
	}
	
	60%, 100% {
		transform-origin: 100% 50%;		
	}

	50% {
		transform: scaleX(1);
	}
	
	60% {
		transform: scaleX(1);
	}
	
	100% {
		transform: scaleX(0);
	}
}






